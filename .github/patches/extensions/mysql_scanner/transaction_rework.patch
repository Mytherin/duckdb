diff --git a/src/include/storage/mysql_transaction_manager.hpp b/src/include/storage/mysql_transaction_manager.hpp
index 8c513fb..47a7980 100644
--- a/src/include/storage/mysql_transaction_manager.hpp
+++ b/src/include/storage/mysql_transaction_manager.hpp
@@ -18,9 +18,9 @@ class MySQLTransactionManager : public TransactionManager {
 public:
 	MySQLTransactionManager(AttachedDatabase &db_p, MySQLCatalog &mysql_catalog);
 
-	Transaction *StartTransaction(ClientContext &context) override;
-	string CommitTransaction(ClientContext &context, Transaction *transaction) override;
-	void RollbackTransaction(Transaction *transaction) override;
+	Transaction &StartTransaction(ClientContext &context) override;
+	string CommitTransaction(ClientContext &context, Transaction &transaction) override;
+	void RollbackTransaction(Transaction &transaction) override;
 
 	void Checkpoint(ClientContext &context, bool force = false) override;
 
diff --git a/src/storage/mysql_table_set.cpp b/src/storage/mysql_table_set.cpp
index 663eeec..20b9ae7 100644
--- a/src/storage/mysql_table_set.cpp
+++ b/src/storage/mysql_table_set.cpp
@@ -181,8 +181,8 @@ string MySQLColumnsToSQL(const ColumnList &columns, const vector<unique_ptr<Cons
 		}
 		if (column.Generated()) {
 			ss << " GENERATED ALWAYS AS(" << column.GeneratedExpression().ToString() << ")";
-		} else if (column.DefaultValue()) {
-			ss << " DEFAULT(" << column.DefaultValue()->ToString() << ")";
+		} else if (column.HasDefaultValue()) {
+			ss << " DEFAULT(" << column.DefaultValue().ToString() << ")";
 		}
 	}
 	// print any extra constraints that still need to be printed
diff --git a/src/storage/mysql_transaction_manager.cpp b/src/storage/mysql_transaction_manager.cpp
index b68a0ad..68ed85c 100644
--- a/src/storage/mysql_transaction_manager.cpp
+++ b/src/storage/mysql_transaction_manager.cpp
@@ -7,28 +7,28 @@ MySQLTransactionManager::MySQLTransactionManager(AttachedDatabase &db_p, MySQLCa
     : TransactionManager(db_p), mysql_catalog(mysql_catalog) {
 }
 
-Transaction *MySQLTransactionManager::StartTransaction(ClientContext &context) {
+Transaction &MySQLTransactionManager::StartTransaction(ClientContext &context) {
 	auto transaction = make_uniq<MySQLTransaction>(mysql_catalog, *this, context);
 	transaction->Start();
 	auto result = transaction.get();
 	lock_guard<mutex> l(transaction_lock);
 	transactions[result] = std::move(transaction);
-	return result;
+	return *result;
 }
 
-string MySQLTransactionManager::CommitTransaction(ClientContext &context, Transaction *transaction) {
-	auto mysql_transaction = (MySQLTransaction *)transaction;
-	mysql_transaction->Commit();
+string MySQLTransactionManager::CommitTransaction(ClientContext &context, Transaction &transaction) {
+	auto &mysql_transaction = transaction.Cast<MySQLTransaction>();
+	mysql_transaction.Commit();
 	lock_guard<mutex> l(transaction_lock);
-	transactions.erase(transaction);
+	transactions.erase(&transaction);
 	return string();
 }
 
-void MySQLTransactionManager::RollbackTransaction(Transaction *transaction) {
-	auto mysql_transaction = (MySQLTransaction *)transaction;
-	mysql_transaction->Rollback();
+void MySQLTransactionManager::RollbackTransaction(Transaction &transaction) {
+	auto &mysql_transaction = transaction.Cast<MySQLTransaction>();
+	mysql_transaction.Rollback();
 	lock_guard<mutex> l(transaction_lock);
-	transactions.erase(transaction);
+	transactions.erase(&transaction);
 }
 
 void MySQLTransactionManager::Checkpoint(ClientContext &context, bool force) {
